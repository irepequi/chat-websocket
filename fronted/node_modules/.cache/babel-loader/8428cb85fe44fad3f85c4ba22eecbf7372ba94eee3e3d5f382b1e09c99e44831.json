{"ast":null,"code":"var _jsxFileName = \"/Volumes/Extreme SSD/Trabajo/PORTFOLIO/Dev/chat-websockets/fronted/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:8080\");\n    socketRef.current = socket;\n\n    // Cuando se abre la conexión\n    socket.onopen = () => {\n      console.log(\"Conexión WebSocket establecida\");\n    };\n\n    // Manejar mensajes entrantes\n    socket.onmessage = async event => {\n      try {\n        let messageData = event.data instanceof Blob ? await event.data.text() : event.data;\n        // const parsedData = JSON.parse(messageData);\n        // setMessages((prevMessages) => [...prevMessages, parsedData]);\n\n        // let messageData;\n        // // Verifica si el mensaje es un Blob\n        // if (event.data instanceof Blob) {\n        //   // Convierte el Blob a texto\n        //   messageData = await event.data.text();\n        // } else {\n        //   // Si no es Blob, usa el dato directamente\n        //   messageData = event.data;\n        // }\n\n        // Verificamos si el mensaje es un JSON válido\n        try {\n          const parsedData = JSON.parse(messageData);\n          setMessages(prevMessages => [...prevMessages, parsedData]);\n        } catch (e) {\n          // Si no es JSON, lo tratamos como texto plano\n          setMessages(prevMessages => [...prevMessages, messageData]);\n        }\n      } catch (e) {\n        console.error(\"Error parsing message:\", e);\n      }\n    };\n\n    // Evento: Cuando ocurre un error en la conexión\n    socket.onerror = error => {\n      console.error(\"Error en WebSocket:\", error);\n    };\n\n    // Evento: Cuando la conexión se cierra\n    socket.onclose = () => {\n      console.log(\"Conexión WebSocket cerrada\");\n    };\n\n    // Limpiar la conexión cuando el componente se desmonte\n    return () => {\n      // if (socketRef.current) socketRef.current.close();\n      if (socket) socket.close();\n      // socket.close();\n    };\n  }, []);\n\n  /**\n   * Envía un mensaje mediante una conexión de socket, si el socket está disponible.\n   * @param message: es el contenido que se transmitirá.\n   */\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.warn(\"WebSocket no está listo para enviar mensajes.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.source === \"server\" ? \"server\" : \"client\"}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Escribe un mensaje...\",\n      onKeyDown: e => {\n        if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\n          sendMessage(e.target.value);\n          e.target.value = \"\";\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","socketRef","socket","WebSocket","current","onopen","console","log","onmessage","event","messageData","data","Blob","text","parsedData","JSON","parse","prevMessages","e","error","onerror","onclose","close","sendMessage","message","readyState","OPEN","send","warn","className","children","map","msg","index","source","content","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","key","target","value","trim","_c","$RefreshReg$"],"sources":["/Volumes/Extreme SSD/Trabajo/PORTFOLIO/Dev/chat-websockets/fronted/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.scss\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:8080\");\n    socketRef.current = socket;\n\n    // Cuando se abre la conexión\n    socket.onopen = () => {\n      console.log(\"Conexión WebSocket establecida\");\n    };\n\n    // Manejar mensajes entrantes\n    socket.onmessage = async (event) => {\n      try {\n        let messageData =\n          event.data instanceof Blob ? await event.data.text() : event.data;\n        // const parsedData = JSON.parse(messageData);\n        // setMessages((prevMessages) => [...prevMessages, parsedData]);\n\n        // let messageData;\n        // // Verifica si el mensaje es un Blob\n        // if (event.data instanceof Blob) {\n        //   // Convierte el Blob a texto\n        //   messageData = await event.data.text();\n        // } else {\n        //   // Si no es Blob, usa el dato directamente\n        //   messageData = event.data;\n        // }\n\n        // Verificamos si el mensaje es un JSON válido\n        try {\n          const parsedData = JSON.parse(messageData);\n          setMessages((prevMessages) => [...prevMessages, parsedData]);\n        } catch (e) {\n          // Si no es JSON, lo tratamos como texto plano\n          setMessages((prevMessages) => [...prevMessages, messageData]);\n        }\n      } catch (e) {\n        console.error(\"Error parsing message:\", e);\n      }\n    };\n\n    // Evento: Cuando ocurre un error en la conexión\n    socket.onerror = (error) => {\n      console.error(\"Error en WebSocket:\", error);\n    };\n\n    // Evento: Cuando la conexión se cierra\n    socket.onclose = () => {\n      console.log(\"Conexión WebSocket cerrada\");\n    };\n\n    // Limpiar la conexión cuando el componente se desmonte\n    return () => {\n      // if (socketRef.current) socketRef.current.close();\n      if (socket) socket.close();\n      // socket.close();\n    };\n  }, []);\n\n  /**\n   * Envía un mensaje mediante una conexión de socket, si el socket está disponible.\n   * @param message: es el contenido que se transmitirá.\n   */\n  const sendMessage = (message) => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.warn(\"WebSocket no está listo para enviar mensajes.\");\n    }\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`message ${\n              msg.source === \"server\" ? \"server\" : \"client\"\n            }`}\n          >\n            {msg.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Escribe un mensaje...\"\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\n            sendMessage(e.target.value);\n            e.target.value = \"\";\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}