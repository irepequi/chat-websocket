{"ast":null,"code":"var _jsxFileName = \"/Volumes/Extreme SSD/Trabajo/PORTFOLIO/Dev/chat-websockets/fronted/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    socketRef.current = new WebSocket(\"ws://localhost:8080\");\n\n    // Recibir mensajes del servidor\n    socketRef.current.onmessage = async event => {\n      try {\n        let data;\n\n        // Verifica si el evento contiene un Blob\n        if (event.data instanceof Blob) {\n          data = await event.data.text(); // Convierte el Blob a texto\n        } else {\n          data = event.data;\n        }\n\n        // Intenta parsear como JSON (si aplica)\n        const parsedData = JSON.parse(data);\n        setMessages(prevMessages => [...prevMessages, parsedData]);\n      } catch (e) {\n        console.error(\"Error parsing message:\", e);\n\n        // setMessages((prevMessages) => [...prevMessages, event.data]); // Si no es JSON válido, lo agrega como texto plano\n      }\n    };\n\n    // Cerrar conexión cuando se desmonta el componente\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.close();\n      }\n    };\n  }, []);\n\n  /**\n   * Envía un mensaje mediante una conexión de socket, si el socket está disponible.\n   * @param message: es el contenido que se transmitirá.\n   */\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Escribe un mensaje...\",\n      onKeyDown: e => {\n        if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\n          sendMessage(e.target.value);\n          e.target.value = \"\";\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","socketRef","current","WebSocket","onmessage","event","data","Blob","text","parsedData","JSON","parse","prevMessages","e","console","error","close","sendMessage","message","readyState","OPEN","send","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","key","target","value","trim","_c","$RefreshReg$"],"sources":["/Volumes/Extreme SSD/Trabajo/PORTFOLIO/Dev/chat-websockets/fronted/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.scss\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    socketRef.current = new WebSocket(\"ws://localhost:8080\");\n\n    // Recibir mensajes del servidor\n    socketRef.current.onmessage = async (event) => {\n      try {\n        let data;\n\n        // Verifica si el evento contiene un Blob\n        if (event.data instanceof Blob) {\n          data = await event.data.text(); // Convierte el Blob a texto\n        } else {\n          data = event.data;\n        }\n\n        // Intenta parsear como JSON (si aplica)\n        const parsedData = JSON.parse(data);\n        setMessages((prevMessages) => [...prevMessages, parsedData]);\n\n      } catch (e) {\n        console.error(\"Error parsing message:\", e);\n\n        // setMessages((prevMessages) => [...prevMessages, event.data]); // Si no es JSON válido, lo agrega como texto plano\n      }\n    };\n\n    // Cerrar conexión cuando se desmonta el componente\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.close();\n      }\n    };\n  }, []);\n\n  /**\n   * Envía un mensaje mediante una conexión de socket, si el socket está disponible.\n   * @param message: es el contenido que se transmitirá.\n   */\n  const sendMessage = (message) => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    }\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className=\"message\">\n            {msg}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Escribe un mensaje...\"\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\n            sendMessage(e.target.value);\n            e.target.value = \"\";\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}