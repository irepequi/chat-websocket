{"ast":null,"code":"var _jsxFileName = \"/Volumes/Extreme SSD/Trabajo/PORTFOLIO/Dev/chat-websockets/fronted/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef(null);\n  const ws = socketRef.current;\n  useEffect(() => {\n    socketRef.current = new WebSocket(\"ws://localhost:8080\");\n\n    // Manejar mensajes entrantes\n    ws.onmessage = async event => {\n      try {\n        let messageData = event.data instanceof Blob ? await event.data.text() : event.data;\n        const parsedData = JSON.parse(messageData);\n        setMessages(prevMessages => [...prevMessages, parsedData]);\n\n        // let messageData;\n        // // Verifica si el mensaje es un Blob\n        // if (event.data instanceof Blob) {\n        //   // Convierte el Blob a texto\n        //   messageData = await event.data.text();\n        // } else {\n        //   // Si no es Blob, usa el dato directamente\n        //   messageData = event.data;\n        // }\n\n        // // Verificamos si el mensaje es un JSON válido\n        // try {\n        //   const parsedData = JSON.parse(messageData);\n        //   setMessages((prevMessages) => [...prevMessages, parsedData]);\n        // } catch (e) {\n        //   // Si no es JSON, lo tratamos como texto plano\n        //   setMessages((prevMessages) => [...prevMessages, messageData]);\n        // }\n      } catch (e) {\n        console.error(\"Error parsing message:\", e);\n      }\n    };\n\n    // Limpiar la conexión cuando el componente se desmonte\n    return () => {\n      if (ws) ws.close();\n    };\n  }, []);\n\n  /**\n   * Envía un mensaje mediante una conexión de socket, si el socket está disponible.\n   * @param message: es el contenido que se transmitirá.\n   */\n  const sendMessage = message => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(message);\n    } else {\n      console.warn(\"WebSocket no está listo para enviar mensajes.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.source === \"server\" ? \"server\" : \"client\"}`,\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Escribe un mensaje...\",\n      onKeyDown: e => {\n        if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\n          sendMessage(e.target.value);\n          e.target.value = \"\";\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","socketRef","ws","current","WebSocket","onmessage","event","messageData","data","Blob","text","parsedData","JSON","parse","prevMessages","e","console","error","close","sendMessage","message","readyState","OPEN","send","warn","className","children","map","msg","index","source","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","key","target","value","trim","_c","$RefreshReg$"],"sources":["/Volumes/Extreme SSD/Trabajo/PORTFOLIO/Dev/chat-websockets/fronted/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.scss\";\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef(null);\n  const ws = socketRef.current;\n\n  useEffect(() => {\n    socketRef.current = new WebSocket(\"ws://localhost:8080\");\n\n    // Manejar mensajes entrantes\n    ws.onmessage = async (event) => {\n      try {\n        let messageData =\n          event.data instanceof Blob ? await event.data.text() : event.data;\n        const parsedData = JSON.parse(messageData);\n        setMessages((prevMessages) => [...prevMessages, parsedData]);\n\n\n\n\n        // let messageData;\n        // // Verifica si el mensaje es un Blob\n        // if (event.data instanceof Blob) {\n        //   // Convierte el Blob a texto\n        //   messageData = await event.data.text();\n        // } else {\n        //   // Si no es Blob, usa el dato directamente\n        //   messageData = event.data;\n        // }\n\n        // // Verificamos si el mensaje es un JSON válido\n        // try {\n        //   const parsedData = JSON.parse(messageData);\n        //   setMessages((prevMessages) => [...prevMessages, parsedData]);\n        // } catch (e) {\n        //   // Si no es JSON, lo tratamos como texto plano\n        //   setMessages((prevMessages) => [...prevMessages, messageData]);\n        // }\n      } catch (e) {\n        console.error(\"Error parsing message:\", e);\n      }\n    };\n\n    // Limpiar la conexión cuando el componente se desmonte\n    return () => {\n      if (ws) ws.close()\n    };\n  }, []);\n\n  /**\n   * Envía un mensaje mediante una conexión de socket, si el socket está disponible.\n   * @param message: es el contenido que se transmitirá.\n   */\n  const sendMessage = (message) => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(message);\n    } else {\n      console.warn(\"WebSocket no está listo para enviar mensajes.\");\n    }\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`message ${\n              msg.source === \"server\" ? \"server\" : \"client\"\n            }`}\n          >\n            {msg}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Escribe un mensaje...\"\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\n            sendMessage(e.target.value);\n            e.target.value = \"\";\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}